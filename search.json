[
  {
    "objectID": "r/report.html",
    "href": "r/report.html",
    "title": "R Validation Report",
    "section": "",
    "text": "##Prepare dataset\n\n\nCode\nlibrary(dplyr)\n\n\n\nAttaching package: 'dplyr'\n\n\nThe following objects are masked from 'package:stats':\n\n    filter, lag\n\n\nThe following objects are masked from 'package:base':\n\n    intersect, setdiff, setequal, union\n\n\nCode\nlibrary(ggplot2)\nlibrary(lubridate)\n\n\n\nAttaching package: 'lubridate'\n\n\nThe following objects are masked from 'package:base':\n\n    date, intersect, setdiff, union\n\n\nCode\n#Load dataset\ndf &lt;- read.csv(\"../data/simulated_cow_data.csv\")\ndf$is_grazing &lt;- tolower(df$is_grazing) == \"true\"\n\n\n#Get hour of day from timestamp\ndf$timestamp &lt;- ymd_hms(df$timestamp)\ndf$hour &lt;- hour(df$timestamp)\n\n\n##Grazing rate per cow per day\n\n\nCode\n# Calculate % of time spent grazing each day per cow\ngrazing_summary &lt;- df %&gt;%\n  mutate(date = as.Date(timestamp)) %&gt;%\n  group_by(cow_id, date) %&gt;%\n  summarise(\n    grazing_rows = sum(is_grazing),\n    total_rows = n(),\n    grazing_pct_r = 100 * grazing_rows / total_rows,\n    .groups = \"drop\"\n  )\n\n\n#Preview grazing summary\nhead(grazing_summary)\n\n\n# A tibble: 6 × 5\n  cow_id date       grazing_rows total_rows grazing_pct_r\n  &lt;chr&gt;  &lt;date&gt;            &lt;int&gt;      &lt;int&gt;         &lt;dbl&gt;\n1 Cow 01 2025-01-01          851       1057          80.5\n2 Cow 01 2025-01-02          318        348          91.4\n3 Cow 02 2025-01-01          825       1062          77.7\n4 Cow 02 2025-01-02          266        349          76.2\n5 Cow 03 2025-01-01          867       1064          81.5\n6 Cow 03 2025-01-02          334        349          95.7\n\n\n##Hourly Grazing Behavior\n\n\nCode\n# Plot grazing state by hour of day\nggplot(df, aes(x = factor(hour), fill = is_grazing)) +\n  geom_bar(position = \"fill\") +\n  scale_y_continuous(labels = scales::percent) +\n  labs(\n    title = \"Grazing Proportion by Hour\",\n    x = \"Hour of Day\",\n    y = \"Proportion Grazing\",\n    fill = \"Grazing?\"\n  ) +\n  theme_minimal()"
  },
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "Cow Movement Analyzer",
    "section": "",
    "text": "Welcome to the Cow Movement Analyzer project. This site contains:\n\nKPI and anomaly analysis (Python)\nSQL-based KPI view (within notebook)\nR-based hourly grazing visualisation\n\nAssumptions: Assumptions made for this showcase (not applicable in real-world scenarios): - All areas of the paddock are equal for grazing - Any time a cow is travelling less than 0.06m/s then it is grazing (even when asleep) - DM Intake rate per cow is 0.03kg/minute always when grazing\nFurther insights: The sample I’ve generated for this is exclusively cow movement data, and would require additional data for better insights. - DM/kg is measured per cow based on an intake rate, but could be measured per paddock with data on intake rates across different paddocks - Grazing patterns could be analyzed with data on paddock -\nOutliers: I’ve added some simulations of outlier data to show that I’ve considered these, but they’re insignificant in terms of the overall dataset. - Cow speed beyond biological capability - could showcase tracker malfunction. - Long gaps between data points - could indicate incomplete data if persistent."
  },
  {
    "objectID": "notebooks/01_kpi_analysis.html",
    "href": "notebooks/01_kpi_analysis.html",
    "title": "Cow Movement Analyzer",
    "section": "",
    "text": "Primary kpi tracker:\n\n\nCode\nimport pandas as pd\nimport numpy as np\nimport matplotlib.pyplot as plt\nimport matplotlib.ticker as mtick\nimport seaborn as sns\nimport os\nimport warnings\nfrom generate_data import simulate_gps_data\n\ndf, meta = simulate_gps_data(seed=42, simulate_sampling_gaps=True)\ndf['timestamp'] = pd.to_datetime(df['timestamp'])\ndf = df.sort_values(['cow_id', 'timestamp']).reset_index(drop=True)\n\n#Paddock boundaries\nlat_min = meta['paddock']['lat_min']\nlat_max = meta['paddock']['lat_max']\nlon_min = meta['paddock']['lon_min']\nlon_max = meta['paddock']['lon_max']\n\nprint(f\"Loaded {len(df):,} rows of data across {df['cow_id'].nunique()} cows.\")\ndf.head()\nos.makedirs(\"data\", exist_ok=True)\ndf.to_csv(\"../data/simulated_cow_data.csv\", index=False)\n\n\n\nLoaded 28,214 rows of data across 20 cows.\n\n\n\n\nCode\n#Calculate\ngrazing_pct = df['is_grazing'].mean() * 100\n\n#Grazing density heatmap\nplt.figure(figsize=(6, 6))\ngrazing_points = df[df['is_grazing']]\nsns.kdeplot(\n    x=grazing_points['lon'],\n    y=grazing_points['lat'],\n    fill=True,\n    cmap=\"YlGn\",\n    bw_adjust=0.5,\n    levels=50,\n    thresh=0\n)\nplt.xlim(lon_min, lon_max)\nplt.ylim(lat_min, lat_max)\nplt.title(f\"Grazing Density Map\\nGrazing Time: {grazing_pct:.1f}%\")\nplt.xlabel(\"Longitude\")\nplt.ylabel(\"Latitude\")\nplt.grid(True)\nplt.show()\n\nprint(f\"Grazing efficiency: Cows spent {grazing_pct:.1f}% of tracked time grazing.\")\n\n\n\n\n\n\n\n\n\nGrazing efficiency: Cows spent 77.7% of tracked time grazing.\n\n\n\n\nCode\n#define intake rate\nINTAKE_RATE = 0.03\nSTEP_MINUTES = 1\n\ndf[\"date\"] = df[\"timestamp\"].dt.date\n\n#kg/DM per cow per day\ndf[\"kg_dm\"] = df[\"is_grazing\"].astype(float) * INTAKE_RATE* STEP_MINUTES\ndaily_totals = df.groupby([\"cow_id\", \"date\"])[\"kg_dm\"].sum().reset_index()\n\n#Calculate average\navg_dm_per_cow = (\n    daily_totals.groupby(\"cow_id\")[\"kg_dm\"]\n    .mean()\n    .reset_index(name=\"avg_kg_dm_per_day\")\n    .sort_values(\"avg_kg_dm_per_day\", ascending=False)\n)\n\n#Plot\nplt.figure(figsize=(10, 5))\nplt.bar(avg_dm_per_cow[\"cow_id\"], avg_dm_per_cow[\"avg_kg_dm_per_day\"], color=\"seagreen\", edgecolor=\"black\")\nplt.title(\"Average Daily Dry Matter Intake per Cow\")\nplt.xlabel(\"Cow ID\")\nplt.ylabel(\"kg of Dry Matter per Day\")\nplt.xticks(rotation=45)\nplt.tight_layout()\nplt.show()\n\n\n\n\n\n\n\n\n\n\n\nCode\n#Setup\nfull_data = df[\"speed_m_s\"]\ngrazing_data = df[df[\"speed_m_s\"] &lt;= 0.6][\"speed_m_s\"]\nmoving_data = df[df[\"speed_m_s\"] &gt; 0.6][\"speed_m_s\"]\n\n#Full Plot\nplt.figure(figsize=(8, 4))\nplt.hist(\n    full_data,\n    bins=60,\n    weights=np.ones_like(full_data) / len(df),\n    color=\"steelblue\",\n    edgecolor=\"black\"\n)\nplt.title(\"Full Speed Distribution\")\nplt.xlabel(\"Speed (m/s)\")\nplt.ylabel(\"Percentage of Observations\")\nplt.gca().yaxis.set_major_formatter(mtick.PercentFormatter(xmax=1.0))\nplt.grid(True, linestyle='--', alpha=0.6)\nplt.tight_layout()\nplt.show()\n\n#Grazing Plot (≤ 0.1 m/s)\nplt.figure(figsize=(8, 4))\nplt.hist(\n    grazing_data,\n    bins=30,\n    weights=np.ones_like(grazing_data) / len(df),\n    color=\"green\",\n    edgecolor=\"black\"\n)\nplt.title(\"Zoom: Grazing Speeds (≤ 0.6 m/s)\")\nplt.xlabel(\"Speed (m/s)\")\nplt.ylabel(\"Percentage of Observations\")\nplt.gca().yaxis.set_major_formatter(mtick.PercentFormatter(xmax=1.0))\nplt.grid(True, linestyle='--', alpha=0.6)\nplt.tight_layout()\nplt.show()\n\n#Moving Plot (&gt; 0.6 m/s)\nplt.figure(figsize=(8, 4))\nplt.hist(\n    moving_data,\n    bins=20,\n    weights=np.ones_like(moving_data) / len(df),\n    color=\"firebrick\",\n    edgecolor=\"black\"\n)\nplt.title(\"Zoom: Moving Speeds (&gt; 0.6 m/s)\")\nplt.xlabel(\"Speed (m/s)\")\nplt.ylabel(\"Percentage of Observations\")\nplt.gca().yaxis.set_major_formatter(mtick.PercentFormatter(xmax=1.0))\nplt.grid(True, linestyle='--', alpha=0.6)\nplt.tight_layout()\nplt.show()\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nCode\nMOVEMENT_THRESHOLD = 0.02\n\ndf[\"is_moving\"] = df[\"speed_m_s\"] &gt; MOVEMENT_THRESHOLD\ndf[df[\"is_night\"]][\"speed_m_s\"].describe()\n\nmovement_counts = df[df[\"is_moving\"]].groupby(\"cow_id\")[\"is_night\"].agg(\n    total_events=\"count\",\n    night_events=\"sum\"\n).reset_index()\n\n#Calculate\nmovement_counts[\"night_restlessness\"] = (\n    movement_counts[\"night_events\"] / movement_counts[\"total_events\"]\n)\n\n#Sort\nmovement_counts = movement_counts.sort_values(\"night_restlessness\", ascending=False)\n\n#plot\nplt.figure(figsize=(10, 5))\nplt.bar(movement_counts[\"cow_id\"], movement_counts[\"night_restlessness\"], color=\"indigo\", edgecolor=\"black\")\nplt.title(\"Night Restlessness per Cow\")\nplt.xlabel(\"Cow ID\")\nplt.ylabel(\"Proportion of Movement Events at Night\")\nplt.ylim(0, 1)\nplt.xticks(rotation=45)\nplt.tight_layout()\nplt.show()\n\n\n\n\n\n\n\n\n\nData validation:\n\n\nCode\n#values & sorting\ndf[\"timestamp\"] = pd.to_datetime(df[\"timestamp\"])\ndf = df.sort_values([\"cow_id\", \"timestamp\"])\n\n#Good data definition\nEXPECTED_STEP_SEC = 60\nGAP_THRESHOLD_SEC = EXPECTED_STEP_SEC * 1.5\n\n#Calculate time gaps\ndf[\"time_diff\"] = (\n    df.groupby(\"cow_id\")[\"timestamp\"]\n    .diff()\n    .dt.total_seconds()\n)\n\n# Flag gaps\ndf[\"is_gap\"] = df[\"time_diff\"] &gt; GAP_THRESHOLD_SEC\n\n#Count gaps\ngap_stats = (\n    df.groupby(\"cow_id\")[\"is_gap\"]\n    .sum()\n    .reset_index(name=\"gap_count\")\n)\n\n#Sort\ngap_stats = gap_stats.sort_values(\"gap_count\", ascending=False)\n\n#Summary\nprint(\"Cows with time sampling gaps:\")\ndisplay(gap_stats[gap_stats[\"gap_count\"] &gt; 0])\n\n#Plot\nplt.figure(figsize=(10, 5))\nplt.bar(gap_stats[\"cow_id\"], gap_stats[\"gap_count\"], color=\"tomato\", edgecolor=\"black\")\nplt.title(\"Sampling Gaps per Cow\")\nplt.xlabel(\"Cow ID\")\nplt.ylabel(\"Number of Gaps ( &gt;90s between samples )\")\nplt.xticks(rotation=45)\nplt.tight_layout()\nplt.show()\n\n\nCows with time sampling gaps:\n\n\n\n\n\n\n\n\n\ncow_id\ngap_count\n\n\n\n\n12\nCow 13\n43\n\n\n8\nCow 09\n41\n\n\n17\nCow 18\n40\n\n\n15\nCow 16\n39\n\n\n3\nCow 04\n38\n\n\n11\nCow 12\n37\n\n\n0\nCow 01\n35\n\n\n18\nCow 19\n34\n\n\n5\nCow 06\n34\n\n\n16\nCow 17\n30\n\n\n9\nCow 10\n29\n\n\n1\nCow 02\n29\n\n\n19\nCow 20\n28\n\n\n2\nCow 03\n27\n\n\n10\nCow 11\n23\n\n\n4\nCow 05\n19\n\n\n6\nCow 07\n15\n\n\n7\nCow 08\n15\n\n\n14\nCow 15\n15\n\n\n13\nCow 14\n15\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nCode\n#Paddock bounds\nlat_min = meta[\"paddock\"][\"lat_min\"]\nlat_max = meta[\"paddock\"][\"lat_max\"]\nlon_min = meta[\"paddock\"][\"lon_min\"]\nlon_max = meta[\"paddock\"][\"lon_max\"]\n\n#Flag out-of-bounds\ndf[\"out_of_bounds\"] = (\n    (df[\"lat\"] &lt; lat_min) | (df[\"lat\"] &gt; lat_max) |\n    (df[\"lon\"] &lt; lon_min) | (df[\"lon\"] &gt; lon_max)\n)\n\n#Count per cow\noob_stats = (\n    df.groupby(\"cow_id\")[\"out_of_bounds\"]\n    .sum()\n    .reset_index(name=\"out_of_bounds_count\")\n    .sort_values(\"out_of_bounds_count\", ascending=False)\n)\n\n#Number of cows out of bounds\nprint(\"Cows with out-of-bounds positions:\")\ndisplay(oob_stats[oob_stats[\"out_of_bounds_count\"] &gt; 0])\n\n#plot\nplt.figure(figsize=(8, 6))\n\n#In paddock\nplt.scatter(df[~df[\"out_of_bounds\"]][\"lon\"], df[~df[\"out_of_bounds\"]][\"lat\"],\n            s=2, alpha=0.2, label=\"Valid\", color=\"grey\")\n\n#Out of paddock\nplt.scatter(df[df[\"out_of_bounds\"]][\"lon\"], df[df[\"out_of_bounds\"]][\"lat\"],\n            s=6, alpha=0.9, label=\"Out of Bounds\", color=\"red\")\n\n#Paddock box around graph\nplt.plot(\n    [lon_min, lon_max, lon_max, lon_min, lon_min],\n    [lat_min, lat_min, lat_max, lat_max, lat_min],\n    linestyle=\"--\", color=\"green\", label=\"Paddock Boundary\"\n)\n\nplt.title(\"Out-of-Bounds GPS Positions\")\nplt.xlabel(\"Longitude\")\nplt.ylabel(\"Latitude\")\nplt.legend(loc=\"upper right\")\nplt.tight_layout()\nplt.show()\n\n\nCows with out-of-bounds positions:\n\n\n\n\n\n\n\n\n\ncow_id\nout_of_bounds_count\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nCode\n#flag spikes\nSPEED_SPIKE_THRESHOLD = 3.0  # m/s\ndf[\"is_speed_spike\"] = df[\"speed_m_s\"] &gt; SPEED_SPIKE_THRESHOLD\n\n#count spikes per cow \nspike_counts = (\n    df.groupby(\"cow_id\")[\"is_speed_spike\"]\n    .sum()\n    .reset_index(name=\"spike_count\")\n    .sort_values(\"spike_count\", ascending=False)\n)\n\n#Cows with a spike\nprint(\"Cows with biologically implausible speed spikes (&gt; 3.0 m/s):\")\ndisplay(spike_counts[spike_counts[\"spike_count\"] &gt; 0])\n\nplt.figure(figsize=(10, 5))\nplt.bar(spike_counts[\"cow_id\"], spike_counts[\"spike_count\"], color=\"firebrick\", edgecolor=\"black\")\nplt.title(\"Speed Spikes per Cow (&gt; 3.0 m/s)\")\nplt.xlabel(\"Cow ID\")\nplt.ylabel(\"Number of Spikes\")\nplt.xticks(rotation=45)\nplt.tight_layout()\nplt.show()\n\n\nCows with biologically implausible speed spikes (&gt; 3.0 m/s):\n\n\n\n\n\n\n\n\n\ncow_id\nspike_count\n\n\n\n\n8\nCow 09\n1\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nCode\n#grazing speeds to simulate\nthresholds = [0.03, 0.04, 0.05, 0.06, 0.07, 0.08]\n\ngrazing_sensitivity = []\nfor t in thresholds:\n    grazing_flag = df[\"speed_m_s\"] &lt;= t\n    grazing_pct = grazing_flag.mean() * 100\n    grazing_sensitivity.append({\"threshold\": t, \"grazing_pct\": grazing_pct})\n\n#convert to DataFrame for plotting\ngrazing_sensitivity_df = pd.DataFrame(grazing_sensitivity)\n\n#plot\nplt.figure(figsize=(8, 5))\nplt.plot(\n    grazing_sensitivity_df[\"threshold\"],\n    grazing_sensitivity_df[\"grazing_pct\"],\n    marker=\"o\", color=\"green\"\n)\nplt.title(\"Sensitivity test: Grazing % vs. Speed Threshold\")\nplt.xlabel(\"Speed Threshold for Grazing (m/s)\")\nplt.ylabel(\"Grazing Percentage (%)\")\nplt.grid(True, linestyle='--', alpha=0.6)\nplt.tight_layout()\nplt.show()\n\n\n\n\n\n\n\n\n\nSQL:\n\n\nCode\nimport duckdb\n\n#Load CSV\nduckdb.sql(\"\"\"\n    CREATE VIEW cow_tracking AS \n    SELECT * FROM '../data/simulated_cow_data.csv'\n\"\"\")\n\n#Grazing efficiency\ndf_kpi = duckdb.sql(\"\"\"\n    SELECT \n        cow_id,\n        DATE(timestamp) AS date,\n        COUNT(*) AS total_rows,\n        COUNT(*) FILTER (WHERE is_grazing) AS grazing_rows,\n        ROUND(100.0 * COUNT(*) FILTER (WHERE is_grazing) / COUNT(*), 2) AS grazing_percent\n    FROM cow_tracking\n    GROUP BY cow_id, DATE(timestamp)\n\"\"\").df()\n\ndf_kpi.head()\n\n\n\n\n\n\n\n\n\ncow_id\ndate\ntotal_rows\ngrazing_rows\ngrazing_percent\n\n\n\n\n0\nCow 02\n2025-01-01\n1062\n825\n77.68\n\n\n1\nCow 11\n2025-01-02\n351\n212\n60.40\n\n\n2\nCow 16\n2025-01-02\n347\n208\n59.94\n\n\n3\nCow 19\n2025-01-02\n348\n333\n95.69\n\n\n4\nCow 07\n2025-01-01\n1072\n868\n80.97"
  }
]